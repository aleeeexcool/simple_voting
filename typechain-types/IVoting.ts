/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IVotingInterface extends utils.Interface {
  functions: {
    "addCandidate(address,uint256)": FunctionFragment;
    "addVoting(address[],uint256)": FunctionFragment;
    "checkCandidate(address,uint256)": FunctionFragment;
    "deleteCandidate(address,uint256)": FunctionFragment;
    "editVotingPeriod(uint256,uint256)": FunctionFragment;
    "getVotingInfo(uint256)": FunctionFragment;
    "setMaxCandidates(uint256)": FunctionFragment;
    "startVoting(uint256)": FunctionFragment;
    "takePartInVoting(uint256,address)": FunctionFragment;
    "withDrawPrize(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCandidate"
      | "addVoting"
      | "checkCandidate"
      | "deleteCandidate"
      | "editVotingPeriod"
      | "getVotingInfo"
      | "setMaxCandidates"
      | "startVoting"
      | "takePartInVoting"
      | "withDrawPrize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoting",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editVotingPeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCandidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "takePartInVoting",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withDrawPrize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takePartInVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withDrawPrize",
    data: BytesLike
  ): Result;

  events: {
    "candidateInfo(uint256,address,bool)": EventFragment;
    "votingDraftCreated(uint256)": EventFragment;
    "votingStarted(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "candidateInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "votingDraftCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "votingStarted"): EventFragment;
}

export interface candidateInfoEventObject {
  id: BigNumber;
  candidate: string;
  existOnThisVoting: boolean;
}
export type candidateInfoEvent = TypedEvent<
  [BigNumber, string, boolean],
  candidateInfoEventObject
>;

export type candidateInfoEventFilter = TypedEventFilter<candidateInfoEvent>;

export interface votingDraftCreatedEventObject {
  id: BigNumber;
}
export type votingDraftCreatedEvent = TypedEvent<
  [BigNumber],
  votingDraftCreatedEventObject
>;

export type votingDraftCreatedEventFilter =
  TypedEventFilter<votingDraftCreatedEvent>;

export interface votingStartedEventObject {
  id: BigNumber;
  startDate: BigNumber;
}
export type votingStartedEvent = TypedEvent<
  [BigNumber, BigNumber],
  votingStartedEventObject
>;

export type votingStartedEventFilter = TypedEventFilter<votingStartedEvent>;

export interface IVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVoting(
      _candidates: PromiseOrValue<string>[],
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deleteCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editVotingPeriod(
      _id: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVotingInfo(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    setMaxCandidates(
      _maxCandidates: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startVoting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takePartInVoting(
      _id: PromiseOrValue<BigNumberish>,
      _candidate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withDrawPrize(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCandidate(
    _candidate: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVoting(
    _candidates: PromiseOrValue<string>[],
    _period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkCandidate(
    _candidate: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deleteCandidate(
    _candidate: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editVotingPeriod(
    _id: PromiseOrValue<BigNumberish>,
    _newPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVotingInfo(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

  setMaxCandidates(
    _maxCandidates: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startVoting(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takePartInVoting(
    _id: PromiseOrValue<BigNumberish>,
    _candidate: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withDrawPrize(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVoting(
      _candidates: PromiseOrValue<string>[],
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editVotingPeriod(
      _id: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getVotingInfo(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    setMaxCandidates(
      _maxCandidates: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startVoting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takePartInVoting(
      _id: PromiseOrValue<BigNumberish>,
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withDrawPrize(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "candidateInfo(uint256,address,bool)"(
      id?: null,
      candidate?: null,
      existOnThisVoting?: null
    ): candidateInfoEventFilter;
    candidateInfo(
      id?: null,
      candidate?: null,
      existOnThisVoting?: null
    ): candidateInfoEventFilter;

    "votingDraftCreated(uint256)"(id?: null): votingDraftCreatedEventFilter;
    votingDraftCreated(id?: null): votingDraftCreatedEventFilter;

    "votingStarted(uint256,uint256)"(
      id?: null,
      startDate?: null
    ): votingStartedEventFilter;
    votingStarted(id?: null, startDate?: null): votingStartedEventFilter;
  };

  estimateGas: {
    addCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVoting(
      _candidates: PromiseOrValue<string>[],
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editVotingPeriod(
      _id: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVotingInfo(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMaxCandidates(
      _maxCandidates: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startVoting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takePartInVoting(
      _id: PromiseOrValue<BigNumberish>,
      _candidate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withDrawPrize(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVoting(
      _candidates: PromiseOrValue<string>[],
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteCandidate(
      _candidate: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editVotingPeriod(
      _id: PromiseOrValue<BigNumberish>,
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVotingInfo(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxCandidates(
      _maxCandidates: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startVoting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takePartInVoting(
      _id: PromiseOrValue<BigNumberish>,
      _candidate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withDrawPrize(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
